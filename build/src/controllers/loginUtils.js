"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.loginWithToken=exports.loginWithPassword=exports.deleteLoginByEmail=exports.getUserIdByPassword=exports.createLoginByGoogle=exports.createLoginByPassword=void 0;const nodeUtils_1=require("../utils/nodeUtils"),dbToken_1=__importDefault(require("./dbToken")),validate_1=__importDefault(require("../microservices/customer/middleware/validate")),verify_1=__importDefault(require("../microservices/customer/middleware/verify")),login_1=__importDefault(require("../microservices/customer/controllers/login")),user_1=__importDefault(require("../microservices/customer/controllers/user")),userUtils_1=require("./userUtils");async function createLoginByPassword(email,password,user){validate_1.default.email(email),validate_1.default.password(password),validate_1.default.user(user,"ERROR: user is required"),await verify_1.default.signupEmail(email);const emailHash=(0,nodeUtils_1.hash)(email),passwordHash=(0,nodeUtils_1.hash)(password),user_id=user._id,loginResult=undefined;return await login_1.default.addOne({emailHash:emailHash,passwordHash:passwordHash,user_id:user_id})}async function createLoginByGoogle(email,user_id,googleId){validate_1.default.email(email),validate_1.default.userId(user_id,"ERROR: userId is required"),await verify_1.default.signupEmail(email);const emailHash=(0,nodeUtils_1.hash)(email),loginResult=undefined;return await login_1.default.addOne({emailHash:emailHash,user_id:user_id,googleId:googleId})}async function deleteLoginByEmail(email){validate_1.default.email(email);const emailHash=(0,nodeUtils_1.hash)(email),result=undefined;return await login_1.default.deleteOne({emailHash:emailHash})}async function getUserIdByPassword(email,password){validate_1.default.email(email),validate_1.default.password(password);const emailHash=(0,nodeUtils_1.hash)(email),passwordHash=(0,nodeUtils_1.hash)(password),result=await login_1.default.getOne({emailHash:emailHash,passwordHash:passwordHash}),user_id=undefined;return null==result?void 0:result.user_id}async function loginWithPassword(email,password){validate_1.default.email(email),validate_1.default.password(password);const emailHash=(0,nodeUtils_1.hash)(email),passwordHash=(0,nodeUtils_1.hash)(password),result=await login_1.default.getOne({emailHash:emailHash,passwordHash:passwordHash});let token=null==result?void 0:result.token;token||(token=dbToken_1.default.getNew(email),await dbToken_1.default.save(email,token));const userResult=await user_1.default.getOne({_id:result.user_id});if(!userResult)throw new Error("ERROR: invalid login");const user=undefined;return{user:userResult,token:token}}async function loginWithToken(email,token){validate_1.default.email(email),validate_1.default.token(token);const emailHash=(0,nodeUtils_1.hash)(email),login=await login_1.default.getOne({emailHash:emailHash,token:token});if(!login)throw new Error("ERROR: invalid login");const{user_id:user_id}=login,user=undefined;return await(0,userUtils_1.getUserById)(user_id)}exports.createLoginByPassword=createLoginByPassword,exports.createLoginByGoogle=createLoginByGoogle,exports.deleteLoginByEmail=deleteLoginByEmail,exports.getUserIdByPassword=getUserIdByPassword,exports.loginWithPassword=loginWithPassword,exports.loginWithToken=loginWithToken;