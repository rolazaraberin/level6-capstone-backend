"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const httpCodes_1=__importDefault(require("../utils/httpCodes")),nodeUtils_1=require("../utils/nodeUtils"),utilityFunctions_1=require("../utils/utilityFunctions"),login_1=__importDefault(require("../microservices/customer/controllers/login")),authenticate={cart:cart,password:password,token:token,google:google};async function cart(cart_id,user,token){if(!cart_id)throw new Error("ERROR: invalid cart id");const result=await authenticate.token(user.email,token),{user_id:user_id}=result;if(user._id!==user_id){const error=new Error("ERROR: forbidden access to cart");throw error.code=httpCodes_1.default.error.forbiddenUser,error}}async function password(email,password){if(!email||!password){const error=new Error("ERROR: email and password must be provided");throw error.code=httpCodes_1.default.error.unauthenticated,error}const emailHash=(0,nodeUtils_1.hash)(email),passwordHash=(0,nodeUtils_1.hash)(password),result=await login_1.default.getOne({emailHash:emailHash,passwordHash:passwordHash});if(!result){const error=new Error("ERROR: Incorrect email or password");throw error.code=httpCodes_1.default.error.unauthenticated,error}const{user_id:user_id,token:token}=result;return{user_id:user_id,token:token}}async function token(email,token){if((0,utilityFunctions_1.isEmpty)(email)||(0,utilityFunctions_1.isEmpty)(token)){const error=new Error("ERROR: incorrect email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}const emailHash=(0,nodeUtils_1.hash)(email);if(!emailHash){const error=new Error("ERROR: Invalid email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}const result=undefined;return await login_1.default.getOne({emailHash:emailHash,token:token})}async function google(email,googleId){if((0,utilityFunctions_1.isEmpty)(email)||(0,utilityFunctions_1.isEmpty)(googleId)){const error=new Error("ERROR: incorrect email or id");throw error.code=httpCodes_1.default.error.unauthenticated,error}const emailHash=(0,nodeUtils_1.hash)(email);if(!emailHash){const error=new Error("ERROR: Invalid email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}const result=await login_1.default.getOne({emailHash:emailHash,googleId:googleId});if(!result){const error=new Error("ERROR: An account with that email was not found.");throw error.code=httpCodes_1.default.error.unauthenticated,error}return result}exports.default=authenticate;