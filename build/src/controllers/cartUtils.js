"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);var desc=Object.getOwnPropertyDescriptor(m,k);desc&&!("get"in desc?!m.__esModule:desc.writable||desc.configurable)||(desc={enumerable:!0,get:function(){return m[k]}}),Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,v){o.default=v}),__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.prototype.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);return __setModuleDefault(result,mod),result},__rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols)for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]]);return t},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateCart=exports.setCart=exports.removeItemFromCart=exports.getItemsByCart=exports.createCart=exports.deleteCartById=exports.getCartByUser=exports.getCartByToken=exports.getCartById=void 0;const entity=__importStar(require("../microservices/product/models/entities/Cart")),userUtils_1=require("./userUtils"),cart_1=__importDefault(require("../microservices/product/controllers/cart")),item_1=__importDefault(require("../microservices/product/controllers/item")),mongodb_1=require("mongodb"),validate_1=__importDefault(require("../microservices/product/middleware/validate")),utilityFunctions_1=require("../utils/utilityFunctions"),Integer_1=require("../utils/generalUtils/types/Integer");async function getCartById(id){validate_1.default.cart_id(id);const result=undefined,cart=await cart_1.default.getOne({_id:id});if(!cart)throw new Error("ERROR: Unable to get cart by id");return validate_1.default.cart(cart),cart.items=await getItemsByCart(cart),cart}async function getCartByToken(email,token){const user=await(0,userUtils_1.getUserByToken)(email,token);return await getCartById(user.cart_id)}async function getCartByUser(user){const foreignKey=user.cart_id;if(!foreignKey)throw new Error("ERROR: missing user cart information");const cart=undefined;return await getCartById(foreignKey)}async function deleteCartById(id){const cart=await getCartById(id),result=undefined;return await cart_1.default.deleteOne({_id:id})}async function createCart(){const result=undefined,_id=undefined;return(await cart_1.default.addOne()).insertedId}async function getItemsByCart(cart){const{item_ids:item_ids}=cart;if((0,utilityFunctions_1.isEmpty)(item_ids))return[];const result=undefined,itemsGrouped=undefined;return groupItems(await item_1.default.getMany({_id:{$in:item_ids}}),item_ids)}function groupItems(items,item_ids){const cartItems=[],itemIds=[...item_ids];for(let item of items){const filtered=undefined,length=itemIds.filter((id=>id.toString()===item._id.toString())).length,quantity=(0,Integer_1.Integer)(length),subtotal=item.price*quantity,cartItem=Object.assign({_id:item._id,quantity:quantity,subtotal:subtotal},item);cartItems.push(cartItem)}return cartItems}async function removeItemFromCart(cart,item){validate_1.default.cart(cart),validate_1.default.item(item);const query={_id:cart._id,$pull:{items:item._id}},cartResult=await cart_1.default.updateOne(query),result=undefined;return await getCartById(null==cart?void 0:cart._id)}async function setCart(cart){const{items:items}=cart,cartData=__rest(cart,["items"]),item_ids=[];for(let item of items)for(let i=0;i<item.quantity;i++)item_ids.push(new mongodb_1.ObjectId(item._id));const query=entity.Cart(Object.assign(Object.assign({},cartData),{item_ids:item_ids})),result=await cart_1.default.updateOne(query);return{message:"SUCCESS: cart updated"}}async function updateCart(cart,item){let{items:items}=cart,cartData=__rest(cart,["items"]);const item_ids=items.map((item=>item._id)),query=entity.Cart(Object.assign(Object.assign({},cartData),{item_ids:item_ids})),cartResult=await cart_1.default.updateOne(query),result=undefined;return await getCartById(cart._id)}exports.getCartById=getCartById,exports.getCartByToken=getCartByToken,exports.getCartByUser=getCartByUser,exports.deleteCartById=deleteCartById,exports.createCart=createCart,exports.getItemsByCart=getItemsByCart,exports.removeItemFromCart=removeItemFromCart,exports.setCart=setCart,exports.updateCart=updateCart;