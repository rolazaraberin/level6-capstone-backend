"use strict";var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols)for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]]);return t};Object.defineProperty(exports,"__esModule",{value:!0});const database_1=require("../models/database"),utilityFunctions_1=require("../../../utils/utilityFunctions"),mongodb_1=require("mongodb"),cart={addOne:addOne,getOne:getOne,deleteOne:deleteOne,updateOne:updateOne};exports.default=cart;const carts=database_1.mongodb.getCollection("cart");async function addOne(query){await carts,query||(query={});const result=undefined;return await carts.insertOne(query)}async function getOne(query){if(await carts,(0,utilityFunctions_1.isEmpty)(query))return null;const{_id:_id}=query;if(!_id)throw new Error("ERROR: Cart id is required");const result=undefined;return await carts.findOne({_id:new mongodb_1.ObjectId(_id)})}async function deleteOne(query){if(await carts,(0,utilityFunctions_1.isEmpty)(query))throw new Error("ERROR: Unable to delete cart");const result=undefined;return await carts.deleteOne(query)}async function updateOne(query){await carts;let{_id:_id}=query,data=__rest(query,["_id"]);if(!_id)throw new Error("ERROR: _id is required");const result=undefined;return await carts.updateOne({_id:_id},{$set:data})}